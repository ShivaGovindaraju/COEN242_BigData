#!/user/bin/env python
from mrjob.job import MRJob
import re

#Author: Shiva Govindaraju
'''Note: While this code was generated by me, I drew
	inspiration for the way to use the MRJob library
	and objects from the examples of MRJob usage
	from the library's documentation on github, though
	I vastly simplified the examples to ensure quick
	and simple execution.'''

WORD_RE = re.compile(r'[A-Za-z]+') # Regex for extracting all alphabetic words

class MRWordFreqCount(MRJob):
	'''MRWordFreqCount extends MRJob and overwrites the normal
	mapper/combiner/reducer functions. In practice, the combiner
	step acts as a preliminary reducer, to simplify the counting
	of all words in the input.'''

	def mapper(self, _, line):
		for word in WORD_RE.findall(line):
			yield(word, 1)

	def combiner(self, word, counts):
		yield (word, sum(counts))

	def reducer(self, word, counts):
		yield (word, sum(counts))

if __name__ == "__main__":
	MRWordFreqCount().run()


